version: "3.9"

services:
  postgres:
    image: postgres:15
    restart: always
    container_name: n8n_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n_password}
      POSTGRES_DB: ${POSTGRES_DB:-n8n_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"

  redis:
    image: redis:7
    restart: always
    container_name: n8n_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    depends_on:
      - postgres
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"

  n8n:
    image: n8nio/n8n:1.81.4
    restart: always
    container_name: n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n_db}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n_password}
      - WEBHOOK_URL=http://localhost:5678
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-securepassword123}
      - GENERIC_TIMEZONE=Asia/Bangkok
      - N8N_RUNNERS_ENABLED=true
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200
      - NODE_ENV=production
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5678:5678"
    networks:
      - n8n_network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "4G" 
  
  pdf2image:
    build: ./pdf2image  
    container_name: pdf2image
    ports:
      - "8080:8080"
    restart: always
    environment:
      - APP_ENV=production
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s


  ocr:
    build:
      context: ./easyocr
      dockerfile: Dockerfile
    container_name: n8n_ocr
    restart: always
    ports:
      - "8866:8866"
    networks:
      - n8n_network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8866/ocr"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "2.0"
    #       memory: "4G"

  ollamaproxy:
    build: ./ollamaproxy
    container_name: ollamaproxy
    ports:
      - "5001:5001"
    depends_on:
      - ollama
    networks:
         - n8n_network
    environment:
      - OLLAMA_HOST=http://ollama:11434

  ollama:
    image: ollama/ollama
    container_name: ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    networks:
      - n8n_network
    command: ["serve"]
    volumes:
      - ollama_models:/root/.ollama
    deploy:
      resources:
        limits:
          cpus: "4.0" 
          memory: "28G"
        reservations:
          memory: "20G"
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - OLLAMA_MAX_LOADED_MODELS=1 # จำกัดโมเดลที่โหลดพร้อมกัน
      - OLLAMA_NUM_PARALLEL=1 # จำกัด parallel requests

  # traefik:
  #   image: traefik:v2.10
  #   restart: always
  #   container_name: traefik
  #   command:
  #     - "--api.dashboard=true"
  #     - "--providers.docker=true"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
  #     - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
  #     - "--entrypoints.websecure.http.tls=true"
  #     - "--log.level=INFO"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080" # Traefik dashboard
  #   volumes:
  #     - traefik_data:/letsencrypt
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./certs:/certs
  #   networks:
  #     - n8n_network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.traefik.rule=Host(`traefik.tunnel.n8n.com`)"
  #     - "traefik.http.routers.traefik.entrypoints=websecure"
  #     - "traefik.http.routers.traefik.tls=true"
  #     - "traefik.http.routers.traefik.service=api@internal"
  #     - "traefik.http.routers.n8n.rule=Host(`${N8N_HOST:-tunnel.n8n.com}`)"
  #     - "traefik.http.routers.n8n.entrypoints=websecure"
  #     - "traefik.http.routers.n8n.tls=true"
  #     - "traefik.http.services.n8n.loadbalancer.server.port=5678"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: "0.5"
  #         memory: "512M"

volumes:
  postgres_data:
  n8n_data:
  traefik_data:
  ollama_models:

networks:
  n8n_network:
    driver: bridge